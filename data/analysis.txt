Для объективной оценки каждого GC(исключая ZGC) остановился на размере хипа в 14 мб, так как у меня подгружается
объектов на ~8 мб. Попробовал сначала сделать хип в 16 мб, но тогда что Serial что Parallel полностью справлялись
только малыми сборками.
-Parallel GC
MergeSort Начало сортировки - 01:41:56.987717400
MergeSort Конец сортировки – 01:41:57.083111300
Время - 95мс
InsertSort Начало сортировки - 01:43:33.083948800
InsertSort Конец сортировки – 01:43:40.749531600
Время — 7с 665мс
BubbleSort Начало сортировки - 01:46:03.054931100
BubbleSort Конец сортировки – 01:48:18.456013800
Время — 2м 15с
Если будем сравнивать с Serial GC то заметим лишь одну полную сборку мусора во время MergeSort, то есть с сортировкой
пузырьком Parallel GC уже смог справиться лишь одними малыми сборками, но отличие во времени
сортировок практически незаметно
-G1 GC
MergeSort Начало сортировки - 02:15:47.847824800
MergeSort Конец сортировки – 02:15:47.964436900
Время - 116мс
InsertSort Начало сортировки - 02:17:02.938545100
InsertSort Конец сортировки – 02:17:09.600781400
Время — 6с 662мс
BubbleSort Начало сортировки - 02:18:15.061153800
BubbleSort Конец сортировки – 02:20:24.358750500
Время — 2м 9с
Тут сразу можно выделить более бережное использование памяти, так как ни разу не было превышена отметка в 10мб.
Также наблюдается достаточно солидное ускорение InsertSort и BubbleSort.
В логах из интересного можно выделить (G1 Humongous Allocation) которое возникает из-за создания огромных массивов,
а так в целом GC более чем справляется малыми и периодически смешанными сборками.
-ZGC
Для него сделал размер хипа в 18 мб.
MergeSort Начало сортировки - 03:15:51.007360
MergeSort Конец сортировки — 03:15:51.192211300
Время — 184мс
InsertSort Начало сортировки - 03:16:27.231624300
InsertSort Конец сортировки — 03:16:33.935004400
Время — 6с 703мс
BubbleSort Начало сортировки - 03:17:10.723515800
BubbleSort Конец сортировки — 03:19:28.076435700
Время — 2м 17с
По этому GC можно сделать вывод, что для нашего приложения он совершенно не подходит, потому что идет работа с слишком
малым объемом памяти. Он сам по себе довольно прожорливый в плане памяти так еще и не выигрываем,
а наоборот проигрываем в скорости сортировки.